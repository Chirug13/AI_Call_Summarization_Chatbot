{"ast":null,"code":"// audioUtils.js\n\nimport axios from \"axios\";\n\n// Upload an audio file and return transcript text\nexport async function uploadAudio(file) {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  try {\n    const response = await axios.post(\"http://127.0.0.1:8000/transcribe\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n    if (response.data && response.data.text) {\n      return response.data.text;\n    } else {\n      alert(\"‚ùó No text returned from server.\");\n      return \"\";\n    }\n  } catch (error) {\n    console.error(\"Upload failed:\", error);\n    alert(\"‚ö†Ô∏è Failed to upload audio.\");\n    return \"\";\n  }\n}\n\n// Start microphone recording and return transcript text\nexport async function startMicRecording() {\n  if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n    alert(\"üé§ Microphone not supported in this browser.\");\n    return \"\";\n  }\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    const mediaRecorder = new MediaRecorder(stream);\n    const chunks = [];\n    return new Promise((resolve, reject) => {\n      mediaRecorder.ondataavailable = e => {\n        chunks.push(e.data);\n      };\n      mediaRecorder.onstop = async () => {\n        const blob = new Blob(chunks, {\n          type: \"audio/webm\"\n        });\n        const file = new File([blob], \"recording.webm\", {\n          type: \"audio/webm\"\n        });\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        try {\n          const response = await axios.post(\"http://127.0.0.1:8000/transcribe\", formData, {\n            headers: {\n              \"Content-Type\": \"multipart/form-data\"\n            }\n          });\n          if (response.data && response.data.text) {\n            resolve(response.data.text);\n          } else {\n            alert(\"‚ùó No voice detected in the audio.\");\n            resolve(\"\");\n          }\n        } catch (err) {\n          console.error(\"Mic upload failed:\", err);\n          alert(\"‚ö†Ô∏è Failed to transcribe mic audio.\");\n          resolve(\"\");\n        }\n      };\n      mediaRecorder.start();\n      setTimeout(() => {\n        mediaRecorder.stop();\n        stream.getTracks().forEach(track => track.stop());\n      }, 5000); // 5-second recording\n    });\n  } catch (error) {\n    console.error(\"Mic recording failed:\", error);\n    alert(\"‚ö†Ô∏è Error accessing microphone.\");\n    return \"\";\n  }\n}","map":{"version":3,"names":["axios","uploadAudio","file","formData","FormData","append","response","post","headers","data","text","alert","error","console","startMicRecording","navigator","mediaDevices","getUserMedia","stream","audio","mediaRecorder","MediaRecorder","chunks","Promise","resolve","reject","ondataavailable","e","push","onstop","blob","Blob","type","File","err","start","setTimeout","stop","getTracks","forEach","track"],"sources":["D:/Redhats/AI_Call_Summarization_V2/client/src/audioUtils.js"],"sourcesContent":["// audioUtils.js\r\n\r\nimport axios from \"axios\";\r\n\r\n// Upload an audio file and return transcript text\r\nexport async function uploadAudio(file) {\r\n  const formData = new FormData();\r\n  formData.append(\"file\", file);\r\n\r\n  try {\r\n    const response = await axios.post(\"http://127.0.0.1:8000/transcribe\", formData, {\r\n      headers: { \"Content-Type\": \"multipart/form-data\" },\r\n    });\r\n\r\n    if (response.data && response.data.text) {\r\n      return response.data.text;\r\n    } else {\r\n      alert(\"‚ùó No text returned from server.\");\r\n      return \"\";\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Upload failed:\", error);\r\n    alert(\"‚ö†Ô∏è Failed to upload audio.\");\r\n    return \"\";\r\n  }\r\n}\r\n\r\n// Start microphone recording and return transcript text\r\nexport async function startMicRecording() {\r\n  if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\r\n    alert(\"üé§ Microphone not supported in this browser.\");\r\n    return \"\";\r\n  }\r\n\r\n  try {\r\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n    const mediaRecorder = new MediaRecorder(stream);\r\n    const chunks = [];\r\n\r\n    return new Promise((resolve, reject) => {\r\n      mediaRecorder.ondataavailable = (e) => {\r\n        chunks.push(e.data);\r\n      };\r\n\r\n      mediaRecorder.onstop = async () => {\r\n        const blob = new Blob(chunks, { type: \"audio/webm\" });\r\n        const file = new File([blob], \"recording.webm\", { type: \"audio/webm\" });\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n\r\n        try {\r\n          const response = await axios.post(\"http://127.0.0.1:8000/transcribe\", formData, {\r\n            headers: { \"Content-Type\": \"multipart/form-data\" },\r\n          });\r\n\r\n          if (response.data && response.data.text) {\r\n            resolve(response.data.text);\r\n          } else {\r\n            alert(\"‚ùó No voice detected in the audio.\");\r\n            resolve(\"\");\r\n          }\r\n        } catch (err) {\r\n          console.error(\"Mic upload failed:\", err);\r\n          alert(\"‚ö†Ô∏è Failed to transcribe mic audio.\");\r\n          resolve(\"\");\r\n        }\r\n      };\r\n\r\n      mediaRecorder.start();\r\n\r\n      setTimeout(() => {\r\n        mediaRecorder.stop();\r\n        stream.getTracks().forEach((track) => track.stop());\r\n      }, 5000); // 5-second recording\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Mic recording failed:\", error);\r\n    alert(\"‚ö†Ô∏è Error accessing microphone.\");\r\n    return \"\";\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}