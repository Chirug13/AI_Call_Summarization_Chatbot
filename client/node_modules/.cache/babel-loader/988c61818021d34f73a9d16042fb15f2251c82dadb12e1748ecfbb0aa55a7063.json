{"ast":null,"code":"// audioUtils.js\n\nexport const uploadAudio = async file => {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  try {\n    const response = await fetch(\"http://localhost:8000/transcribe\", {\n      method: \"POST\",\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to upload audio.\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Upload error:\", error);\n    throw error;\n  }\n};\nexport const startMicRecording = async () => {\n  const stream = await navigator.mediaDevices.getUserMedia({\n    audio: true\n  });\n  const mediaRecorder = new MediaRecorder(stream);\n  const audioChunks = [];\n  return new Promise(resolve => {\n    mediaRecorder.ondataavailable = event => {\n      if (event.data.size > 0) audioChunks.push(event.data);\n    };\n    mediaRecorder.onstop = () => {\n      const audioBlob = new Blob(audioChunks, {\n        type: \"audio/wav\"\n      });\n      resolve(audioBlob);\n    };\n    mediaRecorder.start();\n    setTimeout(() => mediaRecorder.stop(), 5000); // 5 seconds max\n  });\n};","map":{"version":3,"names":["uploadAudio","file","formData","FormData","append","response","fetch","method","body","ok","Error","data","json","error","console","startMicRecording","stream","navigator","mediaDevices","getUserMedia","audio","mediaRecorder","MediaRecorder","audioChunks","Promise","resolve","ondataavailable","event","size","push","onstop","audioBlob","Blob","type","start","setTimeout","stop"],"sources":["D:/Redhats/AI_Call_Summarization_V2/client/src/audioUtils.js"],"sourcesContent":["// audioUtils.js\r\n\r\nexport const uploadAudio = async (file) => {\r\n  const formData = new FormData();\r\n  formData.append(\"file\", file);\r\n\r\n  try {\r\n    const response = await fetch(\"http://localhost:8000/transcribe\", {\r\n      method: \"POST\",\r\n      body: formData,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to upload audio.\");\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(\"Upload error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const startMicRecording = async () => {\r\n  const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n  const mediaRecorder = new MediaRecorder(stream);\r\n  const audioChunks = [];\r\n\r\n  return new Promise((resolve) => {\r\n    mediaRecorder.ondataavailable = (event) => {\r\n      if (event.data.size > 0) audioChunks.push(event.data);\r\n    };\r\n\r\n    mediaRecorder.onstop = () => {\r\n      const audioBlob = new Blob(audioChunks, { type: \"audio/wav\" });\r\n      resolve(audioBlob);\r\n    };\r\n\r\n    mediaRecorder.start();\r\n    setTimeout(() => mediaRecorder.stop(), 5000); // 5 seconds max\r\n  });\r\n};\r\n"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,WAAW,GAAG,MAAOC,IAAI,IAAK;EACzC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EAE7B,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;MAC/DC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEN;IACR,CAAC,CAAC;IAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC5C;IAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACrC,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAC3C,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;IAAEC,KAAK,EAAE;EAAK,CAAC,CAAC;EACzE,MAAMC,aAAa,GAAG,IAAIC,aAAa,CAACN,MAAM,CAAC;EAC/C,MAAMO,WAAW,GAAG,EAAE;EAEtB,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9BJ,aAAa,CAACK,eAAe,GAAIC,KAAK,IAAK;MACzC,IAAIA,KAAK,CAAChB,IAAI,CAACiB,IAAI,GAAG,CAAC,EAAEL,WAAW,CAACM,IAAI,CAACF,KAAK,CAAChB,IAAI,CAAC;IACvD,CAAC;IAEDU,aAAa,CAACS,MAAM,GAAG,MAAM;MAC3B,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACT,WAAW,EAAE;QAAEU,IAAI,EAAE;MAAY,CAAC,CAAC;MAC9DR,OAAO,CAACM,SAAS,CAAC;IACpB,CAAC;IAEDV,aAAa,CAACa,KAAK,CAAC,CAAC;IACrBC,UAAU,CAAC,MAAMd,aAAa,CAACe,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EAChD,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}