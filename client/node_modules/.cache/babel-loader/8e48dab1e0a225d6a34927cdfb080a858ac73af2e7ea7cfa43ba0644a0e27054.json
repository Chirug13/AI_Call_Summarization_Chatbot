{"ast":null,"code":"// src/audioUtils.js\n\nexport async function uploadAudioFile(file) {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  try {\n    const response = await fetch(\"http://127.0.0.1:8000/transcribe\", {\n      method: \"POST\",\n      body: formData\n    });\n    if (!response.ok) throw new Error(\"Upload failed\");\n    const result = await response.json();\n    return result.text;\n  } catch (error) {\n    console.error(\"Error uploading file:\", error);\n    throw error;\n  }\n}\nexport function startMicRecording(setRecording, setAudioBlob) {\n  navigator.mediaDevices.getUserMedia({\n    audio: true\n  }).then(stream => {\n    const mediaRecorder = new MediaRecorder(stream);\n    const chunks = [];\n    mediaRecorder.ondataavailable = e => chunks.push(e.data);\n    mediaRecorder.onstop = () => {\n      const blob = new Blob(chunks, {\n        type: \"audio/wav\"\n      });\n      setAudioBlob(blob);\n    };\n    mediaRecorder.start();\n    setRecording({\n      recorder: mediaRecorder,\n      stream\n    });\n  });\n}","map":{"version":3,"names":["uploadAudioFile","file","formData","FormData","append","response","fetch","method","body","ok","Error","result","json","text","error","console","startMicRecording","setRecording","setAudioBlob","navigator","mediaDevices","getUserMedia","audio","then","stream","mediaRecorder","MediaRecorder","chunks","ondataavailable","e","push","data","onstop","blob","Blob","type","start","recorder"],"sources":["D:/Redhats/AI_Call_Summarization_V2/client/src/audioUtils.js"],"sourcesContent":["// src/audioUtils.js\r\n\r\nexport async function uploadAudioFile(file) {\r\n  const formData = new FormData();\r\n  formData.append(\"file\", file);\r\n\r\n  try {\r\n    const response = await fetch(\"http://127.0.0.1:8000/transcribe\", {\r\n      method: \"POST\",\r\n      body: formData,\r\n    });\r\n    if (!response.ok) throw new Error(\"Upload failed\");\r\n    const result = await response.json();\r\n    return result.text;\r\n  } catch (error) {\r\n    console.error(\"Error uploading file:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport function startMicRecording(setRecording, setAudioBlob) {\r\n  navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\r\n    const mediaRecorder = new MediaRecorder(stream);\r\n    const chunks = [];\r\n\r\n    mediaRecorder.ondataavailable = (e) => chunks.push(e.data);\r\n    mediaRecorder.onstop = () => {\r\n      const blob = new Blob(chunks, { type: \"audio/wav\" });\r\n      setAudioBlob(blob);\r\n    };\r\n\r\n    mediaRecorder.start();\r\n    setRecording({ recorder: mediaRecorder, stream });\r\n  });\r\n}\r\n"],"mappings":"AAAA;;AAEA,OAAO,eAAeA,eAAeA,CAACC,IAAI,EAAE;EAC1C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EAE7B,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;MAC/DC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEN;IACR,CAAC,CAAC;IACF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;IAClD,MAAMC,MAAM,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IACpC,OAAOD,MAAM,CAACE,IAAI;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,SAASE,iBAAiBA,CAACC,YAAY,EAAEC,YAAY,EAAE;EAC5DC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;IAAEC,KAAK,EAAE;EAAK,CAAC,CAAC,CAACC,IAAI,CAAEC,MAAM,IAAK;IACpE,MAAMC,aAAa,GAAG,IAAIC,aAAa,CAACF,MAAM,CAAC;IAC/C,MAAMG,MAAM,GAAG,EAAE;IAEjBF,aAAa,CAACG,eAAe,GAAIC,CAAC,IAAKF,MAAM,CAACG,IAAI,CAACD,CAAC,CAACE,IAAI,CAAC;IAC1DN,aAAa,CAACO,MAAM,GAAG,MAAM;MAC3B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACP,MAAM,EAAE;QAAEQ,IAAI,EAAE;MAAY,CAAC,CAAC;MACpDjB,YAAY,CAACe,IAAI,CAAC;IACpB,CAAC;IAEDR,aAAa,CAACW,KAAK,CAAC,CAAC;IACrBnB,YAAY,CAAC;MAAEoB,QAAQ,EAAEZ,aAAa;MAAED;IAAO,CAAC,CAAC;EACnD,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}